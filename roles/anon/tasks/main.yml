- name: Apt keys
  apt_key: url={{ item }} state=present
  with_items:
    - https://download.docker.com/linux/ubuntu/gpg
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: Apt repos
  apt_repository: repo={{ item }} state=present
  with_items:
    - deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    - ppa:webupd8team/java

- name: Update all packages to the latest version
  apt:
    upgrade: dist
    update_cache: yes
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: Unwanted packages
  apt:
    state: absent
    update_cache: yes
    purge: yes
    name: ['docker', 'docker-engine', 'docker.io', 'haveged', 'accountsservice']

- name: Base packages
  apt:
    name:
      - 'ansible'
      - 'default-jre'
      - 'vim'
      - 'privoxy'
      - 'aptitude'
      - 'apt-transport-https'
      - 'ca-certificates'
      - 'curl'
      - 'software-properties-common'
      - 'docker-ce'
      - 'htop'
      - 'python-pip'
      - 'python-passlib'
      - 'shorewall'
    update_cache: yes
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: docker-py (pip)
  pip:
    name: ['pip', 'docker', 'docker-compose==1.24.0-rc1']
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: Variables in sysctl
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  loop:
    - { name: 'net.core.rmem_max', value: '4194394' }
    - { name: 'net.core.wmem_max', value: '1048576' }

- name: Docker images
  docker_compose:
    project_name: fragugliaserver
    pull: yes
    restarted: yes
    definition:
      version: '3.7'
      services:
        swag:
          image: linuxserver/swag
          container_name: swag
          restart: always
          cap_add:
            - ALL
          environment:
            - PUID=20000
            - GUID=20000
            - TZ=Europe/Paris
            - URL=fraguglia.it
            - SUBDOMAINS=anon,bitwarden,deluge,gotify,grafana,jackett,jenkins,plex,radarr,sonarr,metrics,
            - VALIDATION=http
            - EMAIL=riccardo.casazza@gmail.com
            - DHLEVEL=2048
            - ONLY_SUBDOMAINS=true
            - STAGING=false
          volumes:
            - /home/server0/configuration/LetsEncrypt:/config
          network_mode: host
        bitwarden:
          image: bitwardenrs/server
          container_name: bitwarden
          restart: always
          ports:
            - 81:80
            - 3012:3012
          network_mode: bridge
          volumes:
            - /home/server0/configuration/BitWarden:/data:rw
        openvpn-as:
          image: linuxserver/openvpn-as
          container_name: openvpn-as
          cap_add:
            - NET_ADMIN
          environment:
            - PUID=20000
            - PGID=20000
            - TZ=Europe/Paris
            - INTERFACE=ens3
          volumes:
            - /home/server0/configuration/OpenVPN-AS:/config
          network_mode: host
          restart: always
        gotify:
          image: gotify/server
          container_name: gotify
          network_mode: host
          environment:
            - GOTIFY_SERVER_PORT=7070
          volumes:
            - /home/server0/configuration/Gotify:/app/data
        influxdb:
          image: influxdb:latest
          container_name: influxdb
          network_mode: host
          volumes:
            - /home/server0/configuration/InfluxDB:/var/lib/influxdb2
          restart:
            always
          user: 
            20000:20000
        grafana:
          image: grafana/grafana
          container_name: grafana
          network_mode:
            host
          volumes:
            - /home/server0/configuration/Grafana:/var/lib/grafana
          restart:
            always
          user:
            20000:20000
- name: Server0 home existing and with right rights
  file:
    path: /home/server0
    owner: server0
    group: server0
    recurse: yes
    state: directory

- name: Shorewall
  include_role:
    name: ziobombo.ansible_shorewall
  vars:
    shorewall: True
    shorewall6: False
    shorewall_interfaces:
      - { zone: net, interface: ens3, options: "dhcp,tcpflags,logmartians,nosmurfs,sourceroute=0" }
      - { zone: dock, interface: docker0, options: "bridge" }
      - { zone: vpn, interface: as0t+ }
    shorewall_policies:
      - { source: vpn, dest: all, policy: ACCEPT }
      - { source: dock, dest: all, policy: ACCEPT }
      - { source: "$FW", dest: all, policy: ACCEPT }
      - { source: net, dest: all, policy: REJECT }
      - { source: all, dest: all, policy: REJECT }
    shorewall_rules:
      - section: NEW
        rules:
        - { action: "Invalid(DROP)", source: net, dest: "$FW", proto: tcp }
        - { action: ACCEPT, source: all, dest: "$FW", proto: tcp, dest_port: ssh }
        - { action: ACCEPT, source: all, dest: "$FW", proto: "tcp", dest_port: "http,https" }
        - { action: ACCEPT, source: vpn, dest: "$FW", proto: "tcp,udp", dest_port: 1080 }
        - { action: ACCEPT, source: all, dest: "$FW", proto: "udp", dest_port: 1194 }
        - { action: ACCEPT, source: all, dest: "$FW", proto: "udp", dest_port: 22124 }
        - { action: ACCEPT, source: net, dest: "$FW", proto: icmp, dest_port: echo-request }
    shorewall_zones:
      - { zone: fw, type: firewall }
      - { zone: net, type: ipv4 }
      - { zone: dock, type: ipv4 }
      - { zone: vpn, type: ipv4 }
    shorewall_tunnels:
      - { type: openvpnserver, zone: net, gateway: 0.0.0.0/0 }

- name: Docker support in Shorewall
  lineinfile: path=/etc/shorewall/shorewall.conf line='DOCKER=Yes'

- name: privoxy config file
  template:
    src: config.j2
    dest: /etc/privoxy/config
    owner: root
    group: root
    mode: '0644'

- name: Restart service privoxy, in all cases
  service:
    name: privoxy
    state: restarted
    enabled: yes
  register: task_result
  until: task_result is success
  retries: 10
  delay: 2

- name: Restart service shorewall, in all cases
  service:
    name: shorewall
    state: restarted
    enabled: no

- name: Allow 'server0' user some sudo rights...
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: 'server0 ALL=NOPASSWD: {{ item }}'
    validate: 'visudo -cf %s'
  with_items:
    - /usr/bin/docker
    - /usr/bin/apt
    - /bin/journalctl